# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.6
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# # Programming in Python
# ## Exam: February 25, 2025
#
#
# You can solve the exercises below by using standard Python 3.12 libraries, NumPy, Matplotlib, Pandas, PyMC.
# You can browse the documentation: [Python](https://docs.python.org/3.12/), [NumPy](https://numpy.org/doc/1.26/index.html), [Matplotlib](https://matplotlib.org/3.10.0/users/index.html), [Pandas](https://pandas.pydata.org/pandas-docs/version/2.2/index.html), [PyMC](https://www.pymc.io/projects/docs/en/stable/api.html).
# You can also look at the [slides](https://homes.di.unimi.it/monga/lucidi2425/pyqb00.pdf) or your code on [GitHub](https://github.com).
#
#
# **The exam is "open book", but it is strictly forbidden to communicate with others or "ask questions" online (i.e., stackoverflow is ok if the answer is already there, but you cannot ask a new question or use ChatGPT and similar products). Suspicious canned answers or plagiarism among student solutions will cause the invalidation of the exam for all the people involved.**
#
# To test examples in docstrings use
#
# ```python
# import doctest
# doctest.testmod()
# ```

# **SOLVE EACH EXERCISE IN ONE OR MORE NOTEBOOK CELLS AFTER THE QUESTION.**

import numpy as np   # type: ignore
import pandas as pd  # type: ignore
import matplotlib.pyplot as plt # type: ignore
import pymc as pm   # type: ignore

# ### Exercise 1 (max 1 points)
#
# The file [Howell1.csv](./Howell1.csv) contains partial census data for !Kung San people (Africa), collected by Nancy Howell (~ 1960), csv comes from R. McElreath, "Statistical Rethinking", 2020.
#
# Read the file in a proper Pandas DataFrame.
#
#

pass

# ### Exercise 2 (max 6 points)
#
# We want to add to data a new column `parent` with the index number of one the parents of the individual described by the current row. For example, if the row with index 3 has 0 has its `parent`, this means that the individual described by the row with index 0 is one of the parents of the individual described by row with index 3. 
# The `parent` column must be populated by randomly selecting from all individuals with an age greater than the child's age plus 15
# years, but less then the child's age plus 50. To illustrate this, for the male individual in the row 3 (aged 41), any of the 66 individuals aged between 56 and 91 (extremes included) could be chosen as a parent. In the random selection process, each potential candidate should have an equal probability of being selected. If no individual old enough exists, the parent should be set to -1.

pass

# ### Exercise 3 (max 5 points)
#
# Compute the average age difference between an individual and their parent (ignore -1 parents). To get the full marks do not use explicit loops.

pass

# ### Exercise 4 (max 6 points)
#
# Define a function that takes a Pandas Series and compute a new Series in which each pair of consecutive values is swapped. For example, if the values are 1,2,3,4,5 then the result is a Series with 2,1,4,3,5.
#
# To get the full marks, you should declare correctly the type hints and add a doctest string.

pass

# ### Exercise 5 (max 3 points)
#
# Make a scatter plot with the age of each individual and the age of their parent (ignore -1 parents). Put proper labels on the axis.

pass

# ### Exercise 6 (max 4 points)
#
# Consider only the individuals with a parent of the same sex. On the same axis, make a picture with two scatter plots with different colors, one per sex, of the height of the parent and the height of the child. Put proper labels and a legend.

pass

# ### Exercise 7 (max 4 points)
#
# Add a column `siblings` with the number of child with the same parent as the current individual (consider individual with a -1 parent as siblings). To get the full marks do not use explicit loops.

pass

# ### Exercise 8 (max 4 points)
#
# Consider this statistical model: the height of individual with a parent (different from -1) is normal with an unknown mean $\alpha + \beta\cdot H_p$, where $H_p$ is the height of the parent, and an unknown standard deviation $\sigma$. Your *a priori* estimation for both $\alpha$ and $\beta$ distribution is a normal distibution with mean 0 and std deviation 5; your *a priori* estimation for $\sigma$ exponential distribution with $\lambda=1$. Use PyMC to sample the posterior distributions after having seen the actual values for the heights. Plot the posterior distributions of the variables.

pass


javab deep seek
Exercise 1: Reading the CSV file
We need to read the Howell1.csv file into a Pandas DataFrame.

python
Copy
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv('Howell1.csv')

# Display the first few rows of the DataFrame
df.head()
Exercise 2: Adding the parent column
We need to add a new column parent that contains the index of one of the parents of the individual described by the current row. The parent is randomly selected from individuals who are between 15 and 50 years older than the child.

python
Copy
import numpy as np

def add_parent_column(df):
    df['parent'] = -1  # Initialize the parent column with -1
    
    for idx, row in df.iterrows():
        age = row['age']
        potential_parents = df[(df['age'] > age + 15) & (df['age'] < age + 50)]
        
        if not potential_parents.empty:
            parent_idx = np.random.choice(potential_parents.index)
            df.at[idx, 'parent'] = parent_idx
    
    return df

df = add_parent_column(df)
df.head()
Exercise 3: Computing the average age difference
We need to compute the average age difference between an individual and their parent, ignoring those with a parent of -1.

python
Copy
# Compute the age difference
df['age_difference'] = df.apply(lambda row: df.at[row['parent'], 'age') - row['age'] if row['parent'] != -1 else np.nan, axis=1)

# Compute the average age difference
average_age_difference = df['age_difference'].mean()
average_age_difference
Exercise 4: Swapping consecutive values in a Series
We need to define a function that swaps consecutive values in a Pandas Series.

python
Copy
from typing import List, Union
import pandas as pd

def swap_consecutive_values(series: pd.Series) -> pd.Series:
    """
    Swaps consecutive values in a Pandas Series.
    
    >>> s = pd.Series([1, 2, 3, 4, 5])
    >>> swap_consecutive_values(s)
    0    2
    1    1
    2    4
    3    3
    4    5
    dtype: int64
    """
    swapped_series = series.copy()
    swapped_series[::2] = series[1::2].values
    swapped_series[1::2] = series[::2].values
    return swapped_series

# Test the function
s = pd.Series([1, 2, 3, 4, 5])
swap_consecutive_values(s)
Exercise 5: Scatter plot of age vs parent age
We need to create a scatter plot of the age of each individual against the age of their parent, ignoring those with a parent of -1.

python
Copy
import matplotlib.pyplot as plt

# Filter out rows where parent is -1
filtered_df = df[df['parent'] != -1]

# Create the scatter plot
plt.scatter(filtered_df['age'], df.loc[filtered_df['parent'], 'age'])
plt.xlabel('Age of Individual')
plt.ylabel('Age of Parent')
plt.title('Age of Individual vs Age of Parent')
plt.show()
Exercise 6: Scatter plot of height for same-sex parent-child pairs
We need to create scatter plots of the height of parents and their children, considering only same-sex pairs.

python
Copy
# Filter for same-sex parent-child pairs
same_sex_df = df[df['parent'] != -1]
same_sex_df = same_sex_df[same_sex_df['male'] == df.loc[same_sex_df['parent'], 'male'].values]

# Separate by sex
male_pairs = same_sex_df[same_sex_df['male'] == 1]
female_pairs = same_sex_df[same_sex_df['male'] == 0]

# Create the scatter plots
plt.scatter(df.loc[male_pairs['parent'], 'height'], male_pairs['height'], color='blue', label='Male Pairs')
plt.scatter(df.loc[female_pairs['parent'], 'height'], female_pairs['height'], color='red', label='Female Pairs')
plt.xlabel('Height of Parent')
plt.ylabel('Height of Child')
plt.title('Height of Parent vs Height of Child (Same Sex)')
plt.legend()
plt.show()
Exercise 7: Adding the siblings column
We need to add a column siblings that contains the number of children with the same parent as the current individual.

python
Copy
# Count the number of siblings
df['siblings'] = df.groupby('parent')['parent'].transform('count') - 1

# Set siblings to 0 for individuals with no parent
df.loc[df['parent'] == -1, 'siblings'] = 0

df.head()
Exercise 8: Bayesian modeling with PyMC
We need to model the height of individuals based on their parent's height using PyMC.

python
Copy
import pymc as pm

# Filter out individuals with no parent
filtered_df = df[df['parent'] != -1]

# Define the model
with pm.Model() as height_model:
    # Priors
    alpha = pm.Normal('alpha', mu=0, sigma=5)
    beta = pm.Normal('beta', mu=0, sigma=5)
    sigma = pm.Exponential('sigma', lam=1)
    
    # Expected value
    mu = alpha + beta * df.loc[filtered_df['parent'], 'height'].values
    
    # Likelihood
    height_obs = pm.Normal('height_obs', mu=mu, sigma=sigma, observed=filtered_df['height'])
    
    # Sample from the posterior
    trace = pm.sample(2000, tune=1000)

# Plot the posterior distributions
pm.plot_posterior(trace)
plt.show()
This completes the solution to all the exercises. Each step is explained and the code is provided to solve the problem as described.
..............................................................


javab grok

I'll help solve each exercise step-by-step. Here are the solutions:

Exercise 1
python
Wrap
Copy
# Read the Howell1.csv file into a DataFrame
df = pd.read_csv('Howell1.csv')
Exercise 2
python
Wrap
Copy
def assign_parent(row, df):
    child_age = row['age']
    # Potential parents: age between child_age + 15 and child_age + 50
    min_parent_age = child_age + 15
    max_parent_age = child_age + 50
    
    # Filter potential parents
    potential_parents = df[
        (df['age'] >= min_parent_age) & 
        (df['age'] <= max_parent_age)
    ].index
    
    # If no potential parents found, return -1
    if len(potential_parents) == 0:
        return -1
    
    # Randomly select one parent with equal probability
    return np.random.choice(potential_parents)

# Add parent column
df['parent'] = df.apply(lambda row: assign_parent(row, df), axis=1)
Exercise 3
python
Wrap
Copy
# Filter out -1 parents and compute age differences
valid_parents = df[df['parent'] != -1]
age_diff = valid_parents['age'] - df.loc[valid_parents['parent'], 'age']

# Compute average without loops
avg_age_diff = age_diff.mean()
print(f"Average age difference between individuals and their parents: {avg_age_diff:.2f}")
Exercise 4
python
Wrap
Copy
from pandas import Series
from typing import Union

def swap_consecutive(s: Series) -> Series:
    """
    Swaps consecutive pairs of values in a Series.
    
    Args:
        s: Input pandas Series
        
    Returns:
        A new Series with consecutive values swapped
        
    Examples:
        >>> swap_consecutive(pd.Series([1, 2, 3, 4, 5]))
        0    2
        1    1
        2    4
        3    3
        4    5
        dtype: int64
    """
    s_new = s.copy()
    # Get indices for swapping (even positions with odd positions)
    even_idx = s.index[::2]
    odd_idx = s.index[1::2]
    
    # Swap values where possible
    if len(odd_idx) > 0:
        # Ensure we don't exceed bounds
        min_len = min(len(even_idx), len(odd_idx))
        s_new[even_idx[:min_len]], s_new[odd_idx[:min_len]] = (
            s[odd_idx[:min_len]], 
            s[even_idx[:min_len]]
        )
    
    return s_new

# Test the doctest
if __name__ == "__main__":
    import doctest
    doctest.testmod()
Exercise 5
python
Wrap
Copy
# Filter out -1 parents
valid_parents = df[df['parent'] != -1]

# Create scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(valid_parents['age'], 
           df.loc[valid_parents['parent'], 'age'].values)
plt.xlabel('Individual Age')
plt.ylabel('Parent Age')
plt.title('Age of Individuals vs. Their Parents')
plt.grid(True)
plt.show()
Exercise 6
python
Wrap
Copy
# Filter individuals with same-sex parents
valid_parents = df[df['parent'] != -1]
same_sex = valid_parents[
    valid_parents['male'] == df.loc[valid_parents['parent'], 'male'].values
]

# Split by sex
males = same_sex[same_sex['male'] == 1]
females = same_sex[same_sex['male'] == 0]

# Create scatter plots
plt.figure(figsize=(8, 6))
plt.scatter(males['height'], 
           df.loc[males['parent'], 'height'].values,
           c='blue', label='Male', alpha=0.6)
plt.scatter(females['height'], 
           df.loc[females['parent'], 'height'].values,
           c='red', label='Female', alpha=0.6)

plt.xlabel('Child Height (cm)')
plt.ylabel('Parent Height (cm)')
plt.title('Parent vs Child Height (Same Sex)')
plt.legend()
plt.grid(True)
plt.show()
Exercise 7
python
Wrap
Copy
# Count siblings (including those with -1 parent)
# Group by parent and count, then merge back
siblings_count = df.groupby('parent').size().reset_index(name='siblings')
siblings_count.loc[siblings_count['parent'] == -1, 'siblings'] -= 1  # Exclude self for -1

# Merge with original dataframe
df = df.merge(siblings_count, on='parent', how='left')
# Fill NaN (for those not in groupby) with 0 and adjust for self-counting
df['siblings'] = df['siblings'].fillna(0).astype(int)
df.loc[df['parent'] != -1, 'siblings'] -= 1  # Subtract 1 to exclude self
Exercise 8
python
Wrap
Copy
# Filter valid parent-child pairs
valid_data = df[df['parent'] != -1]
child_height = valid_data['height'].values
parent_height = df.loc[valid_data['parent'], 'height'].values

# PyMC model
with pm.Model() as model:
    # Priors
    alpha = pm.Normal('alpha', mu=0, sigma=5)
    beta = pm.Normal('beta', mu=0, sigma=5)
    sigma = pm.Exponential('sigma', lam=1)
    
    # Expected value
    mu = alpha + beta * parent_height
    
    # Likelihood
    height_obs = pm.Normal('height_obs', mu=mu, sigma=sigma, observed=child_height)
    
    # Sampling
    trace = pm.sample(1000, tune=1000, return_inferencedata=False)

# Plot posterior distributions
plt.figure(figsize=(12, 4))

plt.subplot(131)
plt.hist(trace['alpha'], bins=30, density=True)
plt.title('Posterior of α')
plt.xlabel('α')

plt.subplot(132)
plt.hist(trace['beta'], bins=30, density=True)
plt.title('Posterior of β')
plt.xlabel('β')

plt.subplot(133)
plt.hist(trace['sigma'], bins=30, density=True)
plt.title('Posterior of σ')
plt.xlabel('σ')

plt.tight_layout()
plt.show()
These solutions address all requirements:

Use only allowed libraries
Avoid explicit loops where specified
Include type hints and doctest where required
Provide proper visualizations with labels
Implement the statistical model with PyMC
Make sure to run each cell in your Jupyter notebook and verify the output. The Howell1.csv file should be in your working directory for this to work.
...............................................................................................

Exercise 1 (max 1 point)
Task: Read the file Howell1.csv into a Pandas DataFrame.

python
Copy
Edit
import pandas as pd

# Load the dataset
df = pd.read_csv("Howell1.csv")

# Display the first few rows
df.head()
Exercise 2 (max 6 points)
Task: Add a new column parent with a random selection of individuals who could be parents based on age criteria.

python
Copy
Edit
import numpy as np

# Create a function to assign a parent to each individual
def assign_parent(df):
    parent_ids = []

    for index, row in df.iterrows():
        age = row['age']
        # Find all individuals with age between (age + 15) and (age + 50)
        eligible_parents = df[(df['age'] > age + 15) & (df['age'] < age + 50)]
        
        if not eligible_parents.empty:
            # Randomly select a parent
            parent = eligible_parents.sample(n=1).index[0]
        else:
            # If no eligible parent exists, assign -1
            parent = -1
        
        parent_ids.append(parent)
    
    df['parent'] = parent_ids
    return df

# Apply the function to the DataFrame
df = assign_parent(df)
df.head()
Exercise 3 (max 5 points)
Task: Compute the average age difference between an individual and their parent (ignore -1 parents).

python
Copy
Edit
# Compute the age difference between the individual and their parent
df['parent_age'] = df['parent'].apply(lambda x: df.loc[x, 'age'] if x != -1 else np.nan)
df['age_difference'] = df['parent_age'] - df['age']

# Calculate the average age difference ignoring NaN values
avg_age_difference = df['age_difference'].dropna().mean()
avg_age_difference
Exercise 4 (max 6 points)
Task: Define a function that swaps consecutive values in a Pandas Series.

python
Copy
Edit
import pandas as pd
from typing import Series

def swap_consecutive_values(series: Series) -> Series:
    """
    Given a Pandas Series, swap each pair of consecutive values.

    For example:
    If the input is [1, 2, 3, 4, 5], the output will be [2, 1, 4, 3, 5].

    >>> swap_consecutive_values(pd.Series([1, 2, 3, 4, 5]))
    0    2
    1    1
    2    4
    3    3
    4    5
    dtype: int64
    """
    swapped = series.copy()
    swapped[1::2] = series[::2].values
    swapped[::2] = series[1::2].values
    return swapped

# Test the function
swap_consecutive_values(pd.Series([1, 2, 3, 4, 5]))
Exercise 5 (max 3 points)
Task: Make a scatter plot with the age of each individual and the age of their parent (ignore -1 parents).

python
Copy
Edit
# Remove rows where parent is -1
df_filtered = df[df['parent'] != -1]

# Create the scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df_filtered['age'], df_filtered['parent_age'])
plt.xlabel("Age of Individual")
plt.ylabel("Age of Parent")
plt.title("Age of Individual vs Age of Parent")
plt.show()
Exercise 6 (max 4 points)
Task: Create a scatter plot with the height of the parent and the height of the child, considering only individuals with a parent of the same sex.

python
Copy
Edit
# Add a 'sex' column (assuming you have one in the dataframe)
# Filter individuals with the same sex as their parent
df_same_sex = df[df['sex'] == df['parent_sex']]

# Scatter plot for males and females
plt.figure(figsize=(8, 6))
plt.scatter(df_same_sex[df_same_sex['sex'] == 'M']['parent_height'], 
            df_same_sex[df_same_sex['sex'] == 'M']['height'], label='Male', color='blue')
plt.scatter(df_same_sex[df_same_sex['sex'] == 'F']['parent_height'], 
            df_same_sex[df_same_sex['sex'] == 'F']['height'], label='Female', color='red')

# Add labels
plt.xlabel("Parent's Height")
plt.ylabel("Child's Height")
plt.title("Parent's Height vs Child's Height (Same Sex)")
plt.legend()
plt.show()
Exercise 7 (max 4 points)
Task: Add a column siblings that counts the number of children with the same parent.

python
Copy
Edit
# Create a function to count the number of siblings
def count_siblings(df):
    sibling_counts = df.groupby('parent').size().to_dict()
    df['siblings'] = df['parent'].apply(lambda x: sibling_counts.get(x, 0) if x != -1 else 0)
    return df

# Apply the function
df = count_siblings(df)
df.head()
Exercise 8 (max 4 points)
Task: Use PyMC to model the height based on the parent's height.

python
Copy
Edit
import pymc as pm
import numpy as np

# Filter data to only include individuals with valid parents
df_valid = df[df['parent'] != -1]

# Extract relevant columns
heights = df_valid['height']
parent_heights = df_valid['parent_height']

# Define the PyMC model
with pm.Model() as model:
    alpha = pm.Normal('alpha', mu=0, sigma=5)
    beta = pm.Normal('beta', mu=0, sigma=5)
    sigma = pm.Exponential('sigma', lam=1)
    
    # Linear model for height based on parent's height
    mu = alpha + beta * parent_heights
    
    # Likelihood (normally distributed)
    height_obs = pm.Normal('height_obs', mu=mu, sigma=sigma, observed=heights)
    
    # Sampling from the posterior
    trace = pm.sample(2000, return_inferencedata=False)

# Plot posterior distributions
pm.plot_posterior(trace, var_names=['alpha', 'beta', 'sigma'])
plt.show()
This covers all the exercises! Let me know if you need further clarification or adjustments for any part of the code.
