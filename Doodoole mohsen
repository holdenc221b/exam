# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.6
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# # Programming in Python
# ## Exam: February 25, 2025
#
#
# You can solve the exercises below by using standard Python 3.12 libraries, NumPy, Matplotlib, Pandas, PyMC.
# You can browse the documentation: [Python](https://docs.python.org/3.12/), [NumPy](https://numpy.org/doc/1.26/index.html), [Matplotlib](https://matplotlib.org/3.10.0/users/index.html), [Pandas](https://pandas.pydata.org/pandas-docs/version/2.2/index.html), [PyMC](https://www.pymc.io/projects/docs/en/stable/api.html).
# You can also look at the [slides](https://homes.di.unimi.it/monga/lucidi2425/pyqb00.pdf) or your code on [GitHub](https://github.com).
#
#
# **The exam is "open book", but it is strictly forbidden to communicate with others or "ask questions" online (i.e., stackoverflow is ok if the answer is already there, but you cannot ask a new question or use ChatGPT and similar products). Suspicious canned answers or plagiarism among student solutions will cause the invalidation of the exam for all the people involved.**
#
# To test examples in docstrings use
#
# ```python
# import doctest
# doctest.testmod()
# ```

# **SOLVE EACH EXERCISE IN ONE OR MORE NOTEBOOK CELLS AFTER THE QUESTION.**

import numpy as np   # type: ignore
import pandas as pd  # type: ignore
import matplotlib.pyplot as plt # type: ignore
import pymc as pm   # type: ignore

# ### Exercise 1 (max 1 points)
#
# The file [Howell1.csv](./Howell1.csv) contains partial census data for !Kung San people (Africa), collected by Nancy Howell (~ 1960), csv comes from R. McElreath, "Statistical Rethinking", 2020.
#
# Read the file in a proper Pandas DataFrame.
#
#

pass

# ### Exercise 2 (max 6 points)
#
# We want to add to data a new column `parent` with the index number of one the parents of the individual described by the current row. For example, if the row with index 3 has 0 has its `parent`, this means that the individual described by the row with index 0 is one of the parents of the individual described by row with index 3. 
# The `parent` column must be populated by randomly selecting from all individuals with an age greater than the child's age plus 15
# years, but less then the child's age plus 50. To illustrate this, for the male individual in the row 3 (aged 41), any of the 66 individuals aged between 56 and 91 (extremes included) could be chosen as a parent. In the random selection process, each potential candidate should have an equal probability of being selected. If no individual old enough exists, the parent should be set to -1.

pass

# ### Exercise 3 (max 5 points)
#
# Compute the average age difference between an individual and their parent (ignore -1 parents). To get the full marks do not use explicit loops.

pass

# ### Exercise 4 (max 6 points)
#
# Define a function that takes a Pandas Series and compute a new Series in which each pair of consecutive values is swapped. For example, if the values are 1,2,3,4,5 then the result is a Series with 2,1,4,3,5.
#
# To get the full marks, you should declare correctly the type hints and add a doctest string.

pass

# ### Exercise 5 (max 3 points)
#
# Make a scatter plot with the age of each individual and the age of their parent (ignore -1 parents). Put proper labels on the axis.

pass

# ### Exercise 6 (max 4 points)
#
# Consider only the individuals with a parent of the same sex. On the same axis, make a picture with two scatter plots with different colors, one per sex, of the height of the parent and the height of the child. Put proper labels and a legend.

pass

# ### Exercise 7 (max 4 points)
#
# Add a column `siblings` with the number of child with the same parent as the current individual (consider individual with a -1 parent as siblings). To get the full marks do not use explicit loops.

pass

# ### Exercise 8 (max 4 points)
#
# Consider this statistical model: the height of individual with a parent (different from -1) is normal with an unknown mean $\alpha + \beta\cdot H_p$, where $H_p$ is the height of the parent, and an unknown standard deviation $\sigma$. Your *a priori* estimation for both $\alpha$ and $\beta$ distribution is a normal distibution with mean 0 and std deviation 5; your *a priori* estimation for $\sigma$ exponential distribution with $\lambda=1$. Use PyMC to sample the posterior distributions after having seen the actual values for the heights. Plot the posterior distributions of the variables.

pass


javab deep seek
Exercise 1: Reading the CSV file
We need to read the Howell1.csv file into a Pandas DataFrame.

python
Copy
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv('Howell1.csv')

# Display the first few rows of the DataFrame
df.head()
Exercise 2: Adding the parent column
We need to add a new column parent that contains the index of one of the parents of the individual described by the current row. The parent is randomly selected from individuals who are between 15 and 50 years older than the child.

python
Copy
import numpy as np

def add_parent_column(df):
    df['parent'] = -1  # Initialize the parent column with -1
    
    for idx, row in df.iterrows():
        age = row['age']
        potential_parents = df[(df['age'] > age + 15) & (df['age'] < age + 50)]
        
        if not potential_parents.empty:
            parent_idx = np.random.choice(potential_parents.index)
            df.at[idx, 'parent'] = parent_idx
    
    return df

df = add_parent_column(df)
df.head()
Exercise 3: Computing the average age difference
We need to compute the average age difference between an individual and their parent, ignoring those with a parent of -1.

python
Copy
# Compute the age difference
df['age_difference'] = df.apply(lambda row: df.at[row['parent'], 'age') - row['age'] if row['parent'] != -1 else np.nan, axis=1)

# Compute the average age difference
average_age_difference = df['age_difference'].mean()
average_age_difference
Exercise 4: Swapping consecutive values in a Series
We need to define a function that swaps consecutive values in a Pandas Series.

python
Copy
from typing import List, Union
import pandas as pd

def swap_consecutive_values(series: pd.Series) -> pd.Series:
    """
    Swaps consecutive values in a Pandas Series.
    
    >>> s = pd.Series([1, 2, 3, 4, 5])
    >>> swap_consecutive_values(s)
    0    2
    1    1
    2    4
    3    3
    4    5
    dtype: int64
    """
    swapped_series = series.copy()
    swapped_series[::2] = series[1::2].values
    swapped_series[1::2] = series[::2].values
    return swapped_series

# Test the function
s = pd.Series([1, 2, 3, 4, 5])
swap_consecutive_values(s)
Exercise 5: Scatter plot of age vs parent age
We need to create a scatter plot of the age of each individual against the age of their parent, ignoring those with a parent of -1.

python
Copy
import matplotlib.pyplot as plt

# Filter out rows where parent is -1
filtered_df = df[df['parent'] != -1]

# Create the scatter plot
plt.scatter(filtered_df['age'], df.loc[filtered_df['parent'], 'age'])
plt.xlabel('Age of Individual')
plt.ylabel('Age of Parent')
plt.title('Age of Individual vs Age of Parent')
plt.show()
Exercise 6: Scatter plot of height for same-sex parent-child pairs
We need to create scatter plots of the height of parents and their children, considering only same-sex pairs.

python
Copy
# Filter for same-sex parent-child pairs
same_sex_df = df[df['parent'] != -1]
same_sex_df = same_sex_df[same_sex_df['male'] == df.loc[same_sex_df['parent'], 'male'].values]

# Separate by sex
male_pairs = same_sex_df[same_sex_df['male'] == 1]
female_pairs = same_sex_df[same_sex_df['male'] == 0]

# Create the scatter plots
plt.scatter(df.loc[male_pairs['parent'], 'height'], male_pairs['height'], color='blue', label='Male Pairs')
plt.scatter(df.loc[female_pairs['parent'], 'height'], female_pairs['height'], color='red', label='Female Pairs')
plt.xlabel('Height of Parent')
plt.ylabel('Height of Child')
plt.title('Height of Parent vs Height of Child (Same Sex)')
plt.legend()
plt.show()
Exercise 7: Adding the siblings column
We need to add a column siblings that contains the number of children with the same parent as the current individual.

python
Copy
# Count the number of siblings
df['siblings'] = df.groupby('parent')['parent'].transform('count') - 1

# Set siblings to 0 for individuals with no parent
df.loc[df['parent'] == -1, 'siblings'] = 0

df.head()
Exercise 8: Bayesian modeling with PyMC
We need to model the height of individuals based on their parent's height using PyMC.

python
Copy
import pymc as pm

# Filter out individuals with no parent
filtered_df = df[df['parent'] != -1]

# Define the model
with pm.Model() as height_model:
    # Priors
    alpha = pm.Normal('alpha', mu=0, sigma=5)
    beta = pm.Normal('beta', mu=0, sigma=5)
    sigma = pm.Exponential('sigma', lam=1)
    
    # Expected value
    mu = alpha + beta * df.loc[filtered_df['parent'], 'height'].values
    
    # Likelihood
    height_obs = pm.Normal('height_obs', mu=mu, sigma=sigma, observed=filtered_df['height'])
    
    # Sample from the posterior
    trace = pm.sample(2000, tune=1000)

# Plot the posterior distributions
pm.plot_posterior(trace)
plt.show()
This completes the solution to all the exercises. Each step is explained and the code is provided to solve the problem as described.
