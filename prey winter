import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pymc as pm
import arviz as az

# Exercise 1: Load data
df = pd.read_csv('prey_winter.csv', parse_dates=['date'])

# Exercise 2: Map project_period to numerical values
df['period'] = df['project_period'].map({'NWAI': 1, 'NWAII': 2, 'NWAIII': 3})

# Exercise 3: Function date_check
def date_check(period: str, date: pd.Timestamp) -> bool:
    """Check if date falls within project period.
    >>> date_check('NWAIII', pd.to_datetime('1.1.2015'))
    True
    >>> date_check('NWAIII', pd.to_datetime('1.1.1989'))
    False
    """
    periods = {'NWAI': ('1983-01-01', '1985-12-31'), 'NWAII': ('1997-01-01', '2001-12-31'), 'NWAIII': ('2011-01-01', '2017-12-31')}
    start, end = map(pd.to_datetime, periods[period])
    return start <= date <= end

# Exercise 4: Assert date consistency
df.apply(lambda row: assert date_check(row['project_period'], row['date']), axis=1)

# Exercise 5: Median elevation per species
median_elevation = df.groupby('species')['elevation'].median()
print(median_elevation)

# Exercise 6: Scatter plot of elevation vs slope by habitat type
df.plot.scatter(x='elevation', y='slope', c=df['habitat_type'], colormap='viridis')
plt.title('Elevation vs Slope by Habitat Type')
plt.show()

# Exercise 7: Elevation deltas for habitat type 1 (forest)
forest_df = df[df['habitat_type'] == 1].sort_values(by='elevation')
deltas = np.diff(np.insert(forest_df['elevation'].values, 0, 0))
plt.plot(forest_df['elevation'], deltas, marker='o', linestyle='-')
plt.xlabel('Elevation')
plt.ylabel('Elevation Delta')
plt.title('Elevation Deltas for Forest Habitat')
plt.show()

# Exercise 8: Bayesian model
with pm.Model() as model:
    alpha = pm.Normal('alpha', mu=0, sigma=5)
    beta_e = pm.Normal('beta_e', mu=0, sigma=5)
    beta_h = pm.Normal('beta_h', mu=0, sigma=5)
    sigma = pm.Exponential('sigma', lam=1)
    mu = alpha + beta_e * df['elevation'] + beta_h * df['habitat_type']
    obs = pm.Normal('obs', mu=mu, sigma=sigma, observed=df['slope'])
    trace = pm.sample(1000, tune=1000, return_inferencedata=True, random_seed=42)
az.plot_posterior(trace)
plt.show()

